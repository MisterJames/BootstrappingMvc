    @model bool?

    @{
        // make use of MVC4 nullable class attribute values
        var yesSelected = Model.HasValue && Model.Value ? "active" : null ;
        var noSelected = Model.HasValue && !Model.Value ? "active" : null;
        var noSelection = !Model.HasValue ? "active" : null;   
    
        // get the name of the ID - this is to support multiple fields
        // If the editor is for a child element, the field prefix does not match the element Id (but it still matches the name).
        // In this case Razor uses dot notation in the name while keeping underscore notation in the Id.  HtmlFieldPrefix returns dot notation.
        var htmlField = @"[name=""" + ViewData.TemplateInfo.HtmlFieldPrefix + @"""]";
    }

    @Html.HiddenFor(model => model)
    <div class="btn-group grp-bool" data-toggle="buttons">
        <label class="btn btn-primary @yesSelected"><input type="radio" name="bool-@htmlField" onchange="javascript:$('@htmlField').val(true);" />Yes</label>
        <label class="btn btn-primary @noSelected"><input type="radio" name="bool-@htmlField" onchange="javascript:$('@htmlField').val(false);" />No</label>

        @if (ViewData.ModelMetadata.IsNullableValueType)
        { <label class="btn btn-primary @noSelection"><input type="radio" name="bool-@htmlField" onchange="javascript:$('@htmlField').val('');" />N/A</label> }
    </div>
